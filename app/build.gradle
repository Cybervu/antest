buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


android {
    flavorDimensions 'environment', 'vendor'
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.home.vod"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    productFlavors {

        defaultFlavor {
            dimension 'vendor'
            applicationId 'com.release.muvisdk'
            minSdkVersion 15
            targetSdkVersion 25
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        defaultFlavor_staging_ {
            dimension 'environment'
            buildConfigField "String", "SERVICE_BASE_PATH", "\"https://www.idogic.com/rest/\""

        }

        defaultFlavor_Prod_ {
            dimension 'environment'
            buildConfigField "String", "SERVICE_BASE_PATH", "\"https://www.muvi.com/rest/\""

        }

        vishwamtv {
            dimension 'vendor'
            applicationId 'com.release.vishwamtv'
            minSdkVersion 15
            targetSdkVersion 25
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        vishwamtv_staging_ {
            dimension 'environment'
            buildConfigField "String", "SERVICE_BASE_PATH", "\"https://www.muvi.com/rest/\""

        }

        vishwamtv_Prod_ {
            dimension 'environment'
            buildConfigField "String", "SERVICE_BASE_PATH", "\"https://www.muvi.com/rest/\""

        }


        newthoughtchannel {
            dimension 'vendor'
            applicationId "com.release.newthoughtchannel"
            minSdkVersion 15
            targetSdkVersion 25
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        newthoughtchannel_staging_ {
            dimension 'environment'
            buildConfigField "String", "SERVICE_BASE_PATH", "\"https://www.muvi.com/rest/\""

        }

        newthoughtchannel_Prod_ {
            dimension 'environment'
            buildConfigField "String", "SERVICE_BASE_PATH", "\"https://www.muvi.com/rest/\""

        }

    }
}


android.variantFilter { variant ->

    def environment = variant.getFlavors().get(0).name
    def vendor = variant.getFlavors().get(1).name
    def isRelease = variant.buildType.name.equals('release')
    def isDebug = variant.buildType.name.equals('debug')

/**
 * Filtered defaultFlavor variant.
 */
    if (vendor.equals('defaultFlavor') && environment.equals('vishwamtv_staging_') && isRelease) {
        variant.setIgnore(true)
    }
    if (vendor.equals('defaultFlavor') && environment.equals('vishwamtv_staging_') && isDebug) {
        variant.setIgnore(true)
    }

    if (vendor.equals('defaultFlavor') && environment.equals('vishwamtv_Prod_') && isRelease) {
        variant.setIgnore(true)
    }
    if (vendor.equals('defaultFlavor') && environment.equals('vishwamtv_Prod_') && isDebug) {
        variant.setIgnore(true)
    }
    if (vendor.equals('defaultFlavor') && environment.equals('newthoughtchannel_staging_') && isRelease) {
        variant.setIgnore(true)
    }
    if (vendor.equals('defaultFlavor') && environment.equals('newthoughtchannel_staging_') && isDebug) {
        variant.setIgnore(true)
    }
    if (vendor.equals('defaultFlavor') && environment.equals('newthoughtchannel_Prod_') && isDebug) {
        variant.setIgnore(true)
    }
    if (vendor.equals('defaultFlavor') && environment.equals('newthoughtchannel_Prod_') && isRelease) {
        variant.setIgnore(true)
    }

    /**
     * Filtered vishwamtv variant.
     */
    if (vendor.equals('vishwamtv') && environment.equals('defaultFlavor_staging_') && isRelease) {
        variant.setIgnore(true)
    }
    if (vendor.equals('vishwamtv') && environment.equals('defaultFlavor_staging_') && isDebug) {
        variant.setIgnore(true)
    }

    if (vendor.equals('vishwamtv') && environment.equals('defaultFlavor_Prod_') && isRelease) {
        variant.setIgnore(true)
    }
    if (vendor.equals('vishwamtv') && environment.equals('defaultFlavor_Prod_') && isDebug) {
        variant.setIgnore(true)
    }
    if (vendor.equals('vishwamtv') && environment.equals('newthoughtchannel_staging_') && isRelease) {
        variant.setIgnore(true)
    }
    if (vendor.equals('vishwamtv') && environment.equals('newthoughtchannel_staging_') && isDebug) {
        variant.setIgnore(true)
    }
    if (vendor.equals('vishwamtv') && environment.equals('newthoughtchannel_Prod_') && isDebug) {
        variant.setIgnore(true)
    }
    if (vendor.equals('vishwamtv') && environment.equals('newthoughtchannel_Prod_') && isRelease) {
        variant.setIgnore(true)
    }


    /**
     * Filtered newthoughtchannel variant.
     */
    if (vendor.equals('newthoughtchannel') && environment.equals('defaultFlavor_staging_') && isRelease) {
        variant.setIgnore(true)
    }
    if (vendor.equals('newthoughtchannel') && environment.equals('defaultFlavor_staging_') && isDebug) {
        variant.setIgnore(true)
    }

    if (vendor.equals('newthoughtchannel') && environment.equals('defaultFlavor_Prod_') && isRelease) {
        variant.setIgnore(true)
    }
    if (vendor.equals('newthoughtchannel') && environment.equals('defaultFlavor_Prod_') && isDebug) {
        variant.setIgnore(true)
    }
    if (vendor.equals('newthoughtchannel') && environment.equals('vishwamtv_staging_') && isRelease) {
        variant.setIgnore(true)
    }
    if (vendor.equals('newthoughtchannel') && environment.equals('vishwamtv_staging_') && isDebug) {
        variant.setIgnore(true)
    }
    if (vendor.equals('newthoughtchannel') && environment.equals('vishwamtv_Prod_') && isDebug) {
        variant.setIgnore(true)
    }
    if (vendor.equals('newthoughtchannel') && environment.equals('vishwamtv_Prod_') && isRelease) {
        variant.setIgnore(true)
    }
}


android {
    useLibrary 'org.apache.http.legacy'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile files('libs/universal-image-loader-1.9.4.jar')
    compile 'com.pkmmte.view:circularimageview:1.1'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'io.card:android-sdk:5.4.0'
    compile 'com.daimajia.slider:library:1.1.5@aar'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.devbrackets.android:exomedia:3.0.1'
    //compile files('libs/YouTubeAndroidPlayerApi.jar')
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.google.android.gms:play-services-cast-framework:9.4.0'
    compile 'com.googlecode.android-query:android-query:0.25.9'
    compile 'com.android.support:mediarouter-v7:25.3.1'
    compile 'com.facebook.android:facebook-android-sdk:4.0.0'
    compile 'com.google.firebase:firebase-messaging:9.4.0'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support:palette-v7:25.3.1'
    // compile 'com.github.Muvidevelopers:APISDK:v1.02'

    // compile 'com.muvi:APISDK:v1.02'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile project(path: ':muviplayersdk')
    compile project(':apisdk')
}

task copyJniLibs(type: Copy) {
    from 'libs/armeabi'
    into 'src/main/jniLibs/armeabi'
}
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(copyJniLibs)
}
clean.dependsOn 'cleanCopyJniLibs'

apply plugin: 'com.google.gms.google-services'
