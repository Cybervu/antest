//noinspection GradleDependency
buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'



repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    flavorDimensions 'environment', 'vendor'
    compileSdkVersion 27
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.home.vod"
        minSdkVersion 18
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    defaultConfig { vectorDrawables.useSupportLibrary = true }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


    productFlavors {
        /*Structuring Default flavour with dimension*/
        defaultFlavor {
            dimension 'vendor'
            applicationId 'com.release.muvisdk'
            minSdkVersion 21
            targetSdkVersion 23
            versionCode 4
            versionName "2.0.1"
            testInstrumentationRunner "android.support.testR.runner.AndroidJUnitRunner"
            buildConfigField "String", "AUTH_TOKEN", "\"25e74a5c88d19c4b57c8138bf47abdf7\""//mob
           /* buildConfigField "String", "AUTH_TOKEN", "\"d2d529d95240ed416ead6684bd888c0f\""//idogic test
            buildConfigField "String", "AUTH_TOKEN", "\"fa9a55152dbbe279e1e41e4c77e085ac\""//edocent
            buildConfigField "String", "AUTH_TOKEN", "\"fa2fdc4d02f71137946bb8eedb041830\"" 
            buildConfigField "String", "AUTH_TOKEN", "\"d05f7578a39a20c0ac222c4ba388c930\""// sapphire store
            buildConfigField "String", "AUTH_TOKEN", "\"445882348316089103b8729dcb397c51\""//idogic*/
            //liveStripe
            signingConfigs {
                release {
                    storeFile file("app/MuviReleaseCertificate.jks")
                    storePassword "muvi123"
                    keyAlias "muvi"
                    keyPassword "muvi123"
                }
            }
        }
        defaultFlavor_staging_ {
            dimension 'environment'
            // buildConfigField "String", "SERVICE_BASE_PATH", "\"http://www.edocent.com/rest/\""
            buildConfigField "String", "SERVICE_BASE_PATH", "\"https://www.muvi.com/rest/\""
        }
        defaultFlavor_Prod_ {
            dimension 'environment'
            /*buildConfigField "String", "SERVICE_BASE_PATH", "\"http://www.edocent.com/rest/\""*/
            buildConfigField "String", "SERVICE_BASE_PATH", "\"https://www.muvi.com/rest/\""
            /*buildConfigField "String", "SERVICE_BASE_PATH", "\"https://cms.idogic.com/rest/\""*/
        }
        /*Structuring vishwamtv flavour with dimension*/
       
    }
}


android.variantFilter { variant ->

    def environment = variant.getFlavors().get(0).name
    def vendor = variant.getFlavors().get(1).name
    def isRelease = variant.buildType.name.equals('release')
    def isDebug = variant.buildType.name.equals('debug')

/**
 * Filtered defaultFlavor variant.
 */
    /*Avoid defaultFlavor to vishwamtv combination for both debug & release mode.*/

    if (vendor.equals('defaultFlavor') && (environment.equals('defaultFlavor_staging_') || environment.equals('defaultFlavor_Prod_'))
            && (isRelease || isDebug)) {
        variant.setIgnore(false)
    } else {
        variant.setIgnore(true)
    }


}

android {
    useLibrary 'org.apache.http.legacy'
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    // compile 'com.muvi:APISDK:v1.02'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile project(':apisdk')
    compile project(':MediaLib')

    compile files('libs/wasabi.jar')
    compile files('libs/YouTubeAndroidPlayerApi.jar')
    compile('com.spotxchange:spotx-sdk-android:3.1.+') {
        transitive = false
    }
    // compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.android.support:appcompat-v7:27.1.1'
    compile 'com.pkmmte.view:circularimageview:1.1'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'io.card:android-sdk:5.4.0'
    compile 'com.daimajia.slider:library:1.1.5@aar'
//    compile 'com.devbrackets.android:exomedia:3.0.1'
    compile 'com.android.support:support-v4:27.1.1'
    compile 'com.google.android.gms:play-services-cast-framework:9.4.0'
    compile 'com.googlecode.android-query:android-query:0.25.9'
    compile 'com.android.support:mediarouter-v7:27.1.1'
    compile 'com.facebook.android:facebook-android-sdk:4.0.0'
    compile 'com.google.firebase:firebase-messaging:9.4.0'
    compile 'com.android.support:design:27.1.1'
    compile 'com.android.support:cardview-v7:27.1.1'
    compile 'com.android.support:recyclerview-v7:27.1.1'
    compile 'com.android.support:palette-v7:27.1.1'
    compile 'com.google.android.gms:play-services-auth:9.4.0'
    compile 'com.android.support:multidex:1.0.0'
    compile 'com.google.ads.interactivemedia.v3:interactivemedia:3.6.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    compile "com.android.support:support-media-compat:$rootProject.ext.supportLibVersion"
    compile "com.google.android.exoplayer:extension-okhttp:$rootProject.ext.exoPlayerVersion"



}


task copyJniLibs(type: Copy) {
    from 'libs/armeabi'
    into 'src/main/jniLibs/armeabi'
}
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(copyJniLibs)
}
clean.dependsOn 'cleanCopyJniLibs'

apply plugin: 'com.google.gms.google-services'
